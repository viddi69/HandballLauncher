int x = 0, y = 0;
int corner;
int x1 = 0, x2 = 0, x3 = 0,x4 = 0; 
int y1 = 0, y2 = 0, y3 = 0 ,y4 =0; 
int x_degrees, y_degrees; 
int max_x, max_y;
int min_x, min_y;
int offset = 10000; // set offset to be used as tolerance for max and min of x and y
int test_reg = 2000; // set a max value for how big difference between upper and lower readings, to store them in max and min.
int get_degrees;
int diff;

int c = 0;

//float zone1 [2];

int h, w;
int w1, w2, w3, w4, w5, w6, w7; //widths for zones
int h1, h2, h3, h4, h5, h6, h7; //heights for zones

//float zone[2][2] = { { 0,0}, { 0,0 } };

void setup() {
  // put your setup code here, to run once:

}

void loop() {
  // put your main code here, to run repeatedly:
  calibrate;
  height();
  width();
  zone();

     Serial.print(w1);
        Serial.print(h1);
  delay(1);

}


int calibrate (int get_degrees) {
while (c == 0) { 
  
    // 1. position: Lower left corner (zero)
    x1 = x_degrees; // stores read value of x_degrees in x1
    y1 = y_degrees; // stores read value of y_degrees in y1

    // 2. position: upper left corner
    x2 = x_degrees; // stores read value of x_degrees in x2
    y2 = y_degrees; // stores read value of y_degrees in y2
    min_x = ((x1 + x2) / 2) + offset ;  // takes avg to define general min_x + offset
    
    // 3. position: upper right corner
    x3 = x_degrees; // stores read value of x_degrees in x3
    y3 = y_degrees; // stores read value of y_degrees in y3
    max_y = ((y3 + y2) / 2) - offset; // takes avg to define general max_y minus offset
    
    // 4. position: lower right corner
    x4 = x_degrees; // stores read value of x_degrees in x4
    y4 = y_degrees; // stores read value of y_degrees in y4

    
    diff = x3 - x4; // difference
    if (diff < test_reg) { // Test if x3 and x4 are too off from each other 
    max_x = ( (x3 + x4) / 2 ) - offset;  // takes avg to define general max_x minus offset
    }
    // else Serial.print ("x3 and x4 are too off from each other"); 

    diff = y1 - y4; // difference
    if (diff < test_reg) { // Test if y1 and y4 are too off from each other 
    min_y = ( (y1 + y4) / 2 ) + offset; // takes avg to define general min_y plus offset

      c++;
}
    // else Serial.print ("y1 and y4 are too off from each other"); 

     }
  }

int height () {
  h  = max_y - min_y;
}

int width () {
  w = max_x - min_x; 
}


 float zone () {  // Saves weight and height (x,y) in zones 

      // ZONE 1
      // (x,y) = (w1, h1) 
      w1 = w * 0.25 ;   // Serial.print(w1);
      h1 = h * 0.75 ;   // Serial.print(h1);

      // ZONE 2
      // (x,y) = (w2, h2)
      w2 = w * 0.25 ;     // Serial.print(w2); 
      h2 = h * 0.50 ;   // Serial.print(h2);

      // ZONE 3
      w3 = w * 0.25 ;   
      h3 = h * 0.25 ;

      // ZONE 4
      w4 = w * 0.50 ;   
      h4 = h * 0.25 ;

      // ZONE 5
      w5 = w * 0.75 ;   
      h5 = h * 0.25 ;

      // ZONE 6
      w6 = w * 0.75 ;   
      h6 = h * 0.50 ;

      // ZONE 7
      w7 = w * 0.75 ;   
      h7 = h * 0.75 ;
    
    
//    zone_x [z] = {  }
//    zone_y [z] = 
//   
  }

  

  
//
//  Initial try to save zones

// zone[2][2] = { {0.25 *w, 0.75*h}, {0.50*w, 0.60*h} } ;
//  //int array1[ rows ][ columns ] = { { 1, 2, 3 }, { 4, 5, 6 } };
//  
//   
//  zone1 [2] =  {0.25, 0.75};  // 
//  zone2 =  (0.25w, 0.50h);  
//  zone3 =  (0.25w, 0.25h);  
//  zone4 =  (0.50w, 0.25h);  
//  zone5 =  (0.75w, 0.25h);  
//  zone6 =  (0.75w, 0.50h);
//  zone7(zx), zone7(zy) =  (0.75w), (0.75h);  
  
//}
